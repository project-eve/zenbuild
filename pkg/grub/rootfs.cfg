set linuxkit_cmdline=
set timeout=5
set gfxpayload=text
set default=0

function is_qemu_efi {
  # For now ARM == qemu
  if regexp arm64 $grub_cpu ; then
    return 0
  fi

  # Looking for UEFI QEMU label (hex 5500450046004900200051004500) 
  for b in 1 2 3 4 5 6 7 8 9 ; do
    getenv -b -e Boot000$b -g 8BE4DF61-93CA-11D2-AA0D-00E098032B8C efiboot
    if regexp 5500450046004900200051004500 $efiboot ; then
      return 0
    fi
  done
  return 1
}

# For some silly reason we have to use vda on ARM
if regexp x86_64 "$grub_cpu" ; then
  set base_dev=/dev/sd
else
  set base_dev=/dev/vd
fi

# we could be running off of CD in two situation: qemu
# and BIOS/EFI emulating CD reading off of USB stick.
# The problem with the later is that when the Linux
# kicks-in, it will still recognize the USB stick as
# a /dev/sd* device not /dev/sr*. Since we pass that
# to Linux kernel it means we wouldn't be able to boot
# off of actual CD-ROM on a real device. Oh well...
if regexp -s id '^cd([0-9]+)$' "$root" ; then
  if is_qemu_efi ; then
    set rootfs_root="/dev/sr$id ro"
  else
    set rootfs_root=${base_dev}b
  fi
else
  # we really prefer to get the ID from the parition, but
  # we have to be careful since probe is known to coredump
  # if run on targets without partition table. And sometimes... 
  if regexp "," "$prefix" ; then
    probe --set partuuid -U $root
  fi
  # ...if that's not available, there's a few fallbacks
  if regexp '[0-9a-fA-F-]' "$partuuid" ; then
    set rootfs_root=PARTUUID=$partuuid
  elif regexp '^hd0$' "$root" ; then
    set rootfs_root=${base_dev}a
  elif regexp '^hd1$' "$root" ; then
    set rootfs_root=${base_dev}b
  elif regexp '^hd2$' "$root" ; then
    set rootfs_root=${base_dev}c
  elif regexp '^hd3$' "$root" ; then
    set rootfs_root=${base_dev}d
  fi
fi

if is_qemu_efi ; then
  if regexp x86_64 "$grub_cpu" ; then
     set default=1
  else
     set default=2
  fi
fi

# Since we are using array indices for menuentries make sure to add new ones at the end

menuentry 'LinuxKit Image' {
	multiboot2 /boot/xen.gz
	module2 /boot/kernel console=tty0 $linuxkit_cmdline root=$rootfs_root text
}

menuentry 'LinuxKit Image on QEMU' {
	multiboot2 /boot/xen.gz clocksource=pit console=com1
	module2 /boot/kernel console=hvc0 clocksource=tsc clocksource_failover=xen $linuxkit_cmdline root=$rootfs_root text
}

menuentry 'LinuxKit Image on QEMU/ARM64' {
        xen_hypervisor /boot/xen.efi console=dtuart noreboot dom0_mem=2048M
        xen_module /boot/kernel console=hvc0 hmp-unsafe=true $linuxkit_cmdline root=$rootfs_root text
        devicetree /EFI/BOOT/virt-gicv3.dtb
}

menuentry 'LinuxKit Image on QEMU/ARM64' {
        xen_hypervisor /boot/xen.efi console=dtuart dom0_mem=512M dom0_max_vcpus=4 conswitch=x dtuart=/smb/uart@f7113000
        xen_module /boot/kernel console=hvc0 $linuxkit_cmdline root=$rootfs_root text
        devicetree /EFI/BOOT/hi6220-hikey.dtb
}

menuentry 'LinuxKit Image on COM1 console' {
	multiboot2 /boot/xen.gz com1=115200,8n1 console=com1
	module2 /boot/kernel console=hvc0 $linuxkit_cmdline root=$rootfs_root text
}
