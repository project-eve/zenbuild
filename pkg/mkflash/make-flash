#!/bin/sh

set -ex

IMGFILE=$1

#
# Step 1: Extract partitions from stdin
#
mkdir -p /parts
[ -t 0 ] || (cd /parts; bsdtar xzf -)

ESP_FILE=/parts/efifs.img
IMGA_FILE=`echo /parts/rootfs*.img | cut -f1 -d\ ` 
CONF_FILE=/parts/config.img

#
# Step 1.1: FIXME: this is a horrible hack that needs to go away ASAP
#
[ -f /parts/grub.tar ] && (rm -rf /efifs/* ; tar -C /efifs -xf /parts/grub.tar)

IMAGE_SIZE=$(( 300 * 1024 * 1024 ))

# (x+1024)/1024*1024 rounds up to multiple of 1024KB, or 2048
# sectors some firmwares get confused if the partitions are not
# aligned on 2048 blocks we will round up to the nearest multiple of
# 2048 blocks since each block is 512 bytes, we want the size to be
# a multiple of 2048 blocks * 512 bytes = 1048576 bytes = 1024KB
IMAGE_SIZE_KB=$(( ( ( ($IMAGE_SIZE + 1024-1) / 1024 ) + 1024-1) / 1024 * 1024 ))
IMAGE_SIZE_SECTORS=$(( 2 * $IMAGE_SIZE_KB ))

#
# Step 2: Create EFI partition in ${ESP_FILE}
#

# Minimum headroom for in ESP, in bytes.
ESP_HEADROOM=$((1024 * 1024))

GRUB_SIZE=$((512 * 1024))

# Calculate partition size. There's not much in it.
ESP_FILE_SIZE=$(($GRUB_SIZE + $ESP_HEADROOM))
ESP_FILE_SIZE_KB=$(( ( ( ($ESP_FILE_SIZE+1024-1) / 1024 ) + 1024-1) / 1024 * 1024 ))
ESP_FILE_SIZE_SECTORS=$(( 2 * $ESP_FILE_SIZE_KB ))


# Create EFI partition
mkfs.vfat -v -C $ESP_FILE $(( $ESP_FILE_SIZE_KB )) > /dev/null
echo "mtools_skip_check=1" >> /etc/mtools.conf && \
    mcopy -i $ESP_FILE -s /efifs/* ::/

#
# Step 3: Create bootable image
#

GPTPRIO_ACTIVE=01020000000
GPTPRIO_UNUSED=0000000000000000

# Empty GPT partition
sgdisk --clear $IMGFILE 2> /dev/null

# Add EFI partition
ESP_SECTOR_START=2048
ESP_SECTOR_END=$(( $ESP_SECTOR_START + $ESP_FILE_SIZE_SECTORS - 1 ))
sgdisk --new 1:$ESP_SECTOR_START:$ESP_SECTOR_END --typecode=1:ef00 --change-name=1:'EFI System' \
       --attributes 1:set:2 $IMGFILE 2> /dev/null

# Add ImageA Partition.
IMGA_SECTOR_START=$(( $ESP_SECTOR_END + 1 ))
IMGA_SECTOR_END=$(( $IMGA_SECTOR_START + $IMAGE_SIZE_SECTORS - 1))
sgdisk --new 2:$IMGA_SECTOR_START:$IMGA_SECTOR_END \
       --typecode=2:5dfbf5f4-2848-4bac-aa5e-0d9a20b745a6 \
       --attributes=2:set:56 \
       --attributes=2:set:49 \
       --change-name=2:'IMGA' $IMGFILE 2> /dev/null

# Add ImageB Partition.
IMGB_SECTOR_START=$(( $IMGA_SECTOR_END + 1 ))
IMGB_SECTOR_END=$(( $IMGB_SECTOR_START + $IMAGE_SIZE_SECTORS - 1))
sgdisk --new 3:$IMGB_SECTOR_START:$IMGB_SECTOR_END \
       --typecode=3:5dfbf5f4-2848-4bac-aa5e-0d9a20b745a6 \
       --change-name=3:'IMGB' $IMGFILE 2> /dev/null

if [ -f $CONF_FILE ]; then
    # Add Config Partition if present
     CONF_SIZE=$(stat -c %s "$CONF_FILE")
     CONF_SIZE_KB=$(( ($CONF_SIZE + 1023) / 1024 ))
     CONF_SIZE_KB=$(( ( ( ($CONF_SIZE+1024-1) / 1024 ) + 1024-1) / 1024 * 1024 ))
     CONF_SIZE_SECTORS=$(( 2 * $CONF_SIZE_KB ))
     CONF_SECTOR_START=$(( $IMGB_SECTOR_END + 1 ))
     CONF_SECTOR_END=$(( $CONF_SECTOR_START + $CONF_SIZE_SECTORS - 1 ))

     sgdisk --new 4:$CONF_SECTOR_START:$CONF_SECTOR_END \
	    --typecode=4:13307e62-cd9c-4920-8f9b-91b45828b798 \
	    --change-name=4:'CONFIG' $IMGFILE 2> /dev/null
else
    # No CONFIG partition (!!). Last partition is IMGB
    CONF_SECTOR_END=$(( $IMGB_SECTOR_END + 1))
fi

# Create Persistent Purgeable Partition.  It is set at partition
# number 9 to reserve the first 8 partitions to system types.
P3_SECTOR_START=$(( $CONF_SECTOR_END + 1))
#P3 takes all space available
P3_SECTOR_END=0

sgdisk --new 9:$P3_SECTOR_START:$P3_SECTOR_END \
       --typecode=9:5f24425a-2dfa-11e8-a270-7b663faccc2c \
       --change-name=9:'P3' $IMGFILE 2> /dev/null

# Copy EFI fs to EFI partition
dd if=$ESP_FILE of=$IMGFILE bs=512 count=$ESP_FILE_SIZE_SECTORS \
     conv=notrunc seek=$ESP_SECTOR_START

# Copy rootfs to image A
dd if=$IMGA_FILE of=$IMGFILE bs=512 count=$IMAGE_SIZE_SECTORS \
     conv=notrunc seek=$IMGA_SECTOR_START

# image B is empty

# Copy config fs to config partition
if [ -f $CONF_FILE ]; then
    dd if=$CONF_FILE of=$IMGFILE bs=512 count=$CONF_SIZE_SECTORS \
       conv=notrunc seek=$CONF_SECTOR_START
fi

# P3 is emtpy
